snippet tests "Test Module"
#[cfg(test)]
mod tests {
	use super::*;

	${1}
}
endsnippet

snippet test "Unit Test Template"
#[test]
fn test_${1:func_name}() {
	let actual = ${2:func_under_test};
    let expected = ${3:None};
	assert_eq!(actual, expected);
}
endsnippet

snippet main "Main function"
fn main() {
	${1}
}
endsnippet

snippet derive "Add derive"
#[derive(${1})]
endsnippet

snippet implerror "Implement Error"
impl std::error::Error for ${1:StructName} {}
impl std::fmt::Display for ${1:StructName} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("${2:ErrorMsg}")
    }
}
endsnippet

snippet pr "Println!"
println!("${1:{}}", ${2:var})
endsnippet

snippet error_with_derive "Error With Derive"
use derive_more::From;

pub type Result<T> = core::result::Result<T, Error>;

#[derive(Debug, From)]
pub enum Error {
    #[from]
    Custom(String),

    // -- Externals
    #[from]
    Io(std::io::Error), // as example
}

impl Error {
    pub fn custom(val: impl std::fmt::Display) -> Self {
        Self::Custom(val.to_string())
    }
}

impl From<&str> for Error {
    fn from(val: &str) -> Self {
        Self::Custom(val.to_string())
    }
}

impl core::fmt::Display for Error {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::result::Result<(), core::fmt::Error> {
        write!(fmt, "{self:?}")
    }
}

impl std::error::Error for Error {}
endsnippet
